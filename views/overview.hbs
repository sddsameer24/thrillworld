<div class='container'><div class="jumbotron">
    <div class="container-fluid">
        <h2>MongoDB: Building on the Best of Relational with the Innovations of NoSQL</h2>
        <p><img style='float:left;width:100px;height:100px; margin-right:10px;' src='images/ThrillWorld-100x100.png' style='align:left'>This site was created to showcase MongoDB's capabilities in the Faceted Search, Graph Lookup and BI/Analytics spaces.  These capabilities are demonstrated through the lense of a ficticious online ecommerce company "ThrillWorld".  To view the online shop, click <a href="/" target="_blank">here</a>.
        </p><p>
        This vendor faces the same challenges most retail companies face today, striving to ensure that their products are not only available online but searchable and displayed in a manner that lets customers easily find products by many facets. </p>
        <p><a href="#" target="_blank" class="btn btn-success btn-lg">Get started</a></p>
    </div>
</div>


<ul class="nav nav-tabs" role="tablist">
    <li role="presentation" class="active"><a href="#home" aria-controls="home" role="tab" data-toggle="tab">Overview</a></li>
    <li role="presentation"><a href="#data" aria-controls="data" role="tab" data-toggle="tab">Data Generators</a></li>
</ul>

<!-- Tab panes -->
<div class="tab-content">
    <div role="tabpanel" class="tab-pane active" id="home">
        
<div class="container-fluid">
    <div class="row"><h3>
        This demo environment makes use of several features that are new to MongoDB as of version 3.4.  If you haven't used this new version or are unfamiliar with these versions, you may be surprised.  Feel free to click through to the documentation links for each of the following content sections.</h3>
        <div class="col-xs-4">
            <h2>Faceted Search</h2>
            <p>Additions to the aggregation framework include faceted navigation for richer search, and new expressions and optimizations to help you unlock real-time insights from data as it arrives.</p>
            <p><a href="https://www.mongodb.com/mongodb-3.4" target="_blank" class="btn btn-success btn-lg">Learn More &raquo;</a></p>
        </div>
        <div class="col-xs-4">
            <h2>Graph Lookup</h2>
            <p>Discover patterns &amp; uncover connections. The $graphLookup operator enables native graph processing in MongoDB so you can efficiently traverse trees, graphs, and hierarchical data without relying on a single-purpose graph database.</p>
            <p><a href="https://www.mongodb.com/mongodb-3.4" target="_blank" class="btn btn-success btn-lg">Learn More &raquo;</a></p>
        </div>
        <div class="col-xs-4">
            <h2>Analytics</h2>
            <p>The MongoDB Connector for BI has been upgraded to push more work to the database, allowing you to get faster insights from industry leading BI tools such as Tableau or BusinessObjects.</p>
            <p><a href="https://www.mongodb.com/mongodb-3.4" target="_blank" class="btn btn-success btn-lg">Learn More &raquo;</a></p>
        </div>
    </div>
	<div class="row"><h3>Data Collections and Examples</h3></div>
    <div class="row">
        <div class="col-xs-3">
            <h2>Users</h2>
            <p>This application manages its own user authentication, leveraging MongoDB to store the user records.  </p>
            
<button class="btn btn-warning btn-lg" data-title="View" data-toggle="modal" data-target="#users-modal">View User Document <span class="glyphicon glyphicon-eye-open"></span>
</button>
</p>
<!-- Add Dialog -->
<div class="modal fade" id="users-modal" tabindex="-1" role="dialog" aria-labelledby="add" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></button>
                <h4 class="modal-title custom_align" id="Heading">View MongoDB Document</h4>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <pre><code class="prettyPrint">{{JSON user}}</code></pre>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" data-dismiss="modal" class="btn btn-warning btn-lg" style="width: 100%;"><span class="glyphicon glyphicon-ok-sign"></span>Close</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>

        </div>
        <div class="col-xs-3">
            <h2>Products</h2>
            <p>Retail and ecommerce use cases present a perfect match for MongoDB's flexible, document-based storage modal.  Pricing competition. Endless online distractions. New selling channels appearing every single day. Your world is a battleground â€“ equip yourself with the right weapon and rise above the competition. Join the industry innovators that are already using MongoDB in transformative ways to increase their revenue streams.</p>
            

<button class="btn btn-warning btn-lg" data-title="View" data-toggle="modal" data-target="#product-modal">View Product Document <span class="glyphicon glyphicon-eye-open"></span>
</button>
</p>
<!-- Add Dialog -->
<div class="modal fade" id="product-modal" tabindex="-1" role="dialog" aria-labelledby="add" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></button>
                <h4 class="modal-title custom_align" id="Heading">View MongoDB Document</h4>
            </div>
            <div class="modal-body">
                <div class="form-group">
{{!--                     <textarea rows='15' class="form-control">{{this}}</textarea>
 --}}                    <pre>{{JSON product}}</pre>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" data-dismiss="modal" class="btn btn-warning btn-lg" style="width: 100%;"><span class="glyphicon glyphicon-ok-sign"></span>Close</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>




        </div>
<div class="col-xs-3">
	<h2>Orders</h2>
	<p>The MongoDB Connector for BI has been upgraded to push more work to the database, allowing you to get faster insights from
		industry leading BI tools such as Tableau or BusinessObjects.</p>

	<button class="btn btn-warning btn-lg" data-title="View" data-toggle="modal" data-target="#order-modal">View Order Document <span class="glyphicon glyphicon-eye-open"></span>
	</button>
	<p>Notice the Attributes field, which contains different fields depending upon the category of the product.</p>
	</p>
	<!-- Add Dialog -->
	<div class="modal fade" id="order-modal" tabindex="-1" role="dialog" aria-labelledby="add" aria-hidden="true">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<button type="button" class="close" data-dismiss="modal" aria-hidden="true"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></button>
					<h4 class="modal-title custom_align" id="Heading">View MongoDB Document</h4>
				</div>
				<div class="modal-body">
					<div class="form-group">
						{{!-- <textarea rows='15' class="form-control">{{this}}</textarea> --}}
						<pre>{{JSON order}}</pre>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" data-dismiss="modal" class="btn btn-warning btn-lg" style="width: 100%;"><span class="glyphicon glyphicon-ok-sign"></span>Close</button>
				</div>
			</div>
			<!-- /.modal-content -->
		</div>
		<!-- /.modal-dialog -->
	</div>
</div>

<div class="col-xs-3">
	<h2>Stores</h2>
	<p>This demonstration includes a collection of stores which enables us to show geolocation queries.  To view the store locator which incorporates a Google Map showing all store locations, login with administrative privileges and visit the dashboard url: http://localhost:3000/admin/stores</p>

	<button class="btn btn-warning btn-lg" data-title="View" data-toggle="modal" data-target="#order-modal">View Store Document <span class="glyphicon glyphicon-eye-open"></span>
	</button>
	</p>
	<!-- Add Dialog -->
	<div class="modal fade" id="order-modal" tabindex="-1" role="dialog" aria-labelledby="add" aria-hidden="true">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<button type="button" class="close" data-dismiss="modal" aria-hidden="true"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></button>
					<h4 class="modal-title custom_align" id="Heading">View MongoDB Document</h4>
				</div>
				<div class="modal-body">
					<div class="form-group">
						{{!-- <textarea rows='15' class="form-control">{{this}}</textarea> --}}
						<pre>{{JSON order}}</pre>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" data-dismiss="modal" class="btn btn-warning btn-lg" style="width: 100%;"><span class="glyphicon glyphicon-ok-sign"></span>Close</button>
				</div>
			</div>
			<!-- /.modal-content -->
		</div>
		<!-- /.modal-dialog -->
	</div>
</div>
</div>
</div>

    </div>
    <div role="tabpanel" class="tab-pane" id="data">        
<div class="container-fluid">
    <div class="row"><h3>
        In order to make this demo work, I've created several data generators.  The following lists details of each.</h3>
        <div class="col-xs-4">
            <h2>Fake Products</h2>
            <p>Products are at the heart of any eCommerce Solution.
            <p>
<p data-placement="top" data-toggle="tooltip" title="View Document ">
    <button class="ui right floated btn btn-warning btn-lg" data-title="view" data-toggle="modal" data-target="#view-fake-products"> <span class="glyphicon glyphicon-eye-open"></span> View Fake Product Generator
    </button>
</p>
<!-- Add Dialog -->
<div class="modal fade" id="view-fake-products" tabindex="-1" role="dialog" aria-labelledby="view" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></button>
                <h4 class="modal-title custom_align" id="Heading">View Script</h4>
            </div>
            <div class="modal-body">
                <pre><code class="prettyPrint">
// Michael Lynn <michael.lynn@mongodb.com
// Generate fake products 
var Product = require('../models/product');
var User = require('../models/user');
var Category = require('../models/category');
var mongoose = require('mongoose');
var async = require('async');

var faker = require('faker');
mongoose.Promise = global.Promise;

var Config = require('../config/config');
const dotenv = require('dotenv');
const chalk = require('chalk');
dotenv.load({
    path: '.env.hackathon'
});

mongoose.Promise = global.Promise;
mongoose.connect(process.env.MONGODB_URI || process.env.MONGOLAB_URI);
mongoose.connection.on('error', () => {
  ////console.log('%s MongoDB connection error. Please make sure MongoDB is running.', chalk.red('âœ—'));
  logger.log('error','%s MongoDB connection error. Please make sure MongoDB is running.');
  process.exit();
});

products = [];
brands = ['Sony','LG','Generic','PROSCAN','Apple','Dell','Flimsy','Freds','Throwback'];
resolutions = ['1080p','1080l','720p','1440p','4k','8k'];
product_groups = ['Flat Screen','Cathode Ray Tube','LCD','HDTV','Curved'];

var done = 0;
async.times(100, function(i, next) {

	var numUsers = Math.floor(Math.random() * (10 - 2 + 1)) + 2;
	User.aggregate([{ $sample: { size: numUsers }},{$project: { _id: 1 }}], function(err,usersArray) {
		if (err) {
			////console.log(err);
		}
		var items = []
		for(user in usersArray) {
			items.push(usersArray[user]._id);
		};
		var code = 1000 + i;
		var color = faker.commerce.color();
		var materialBrand = faker.commerce.productMaterial();

		brandNum = Math.floor((Math.random() * brands.length-1) + 1);
		resNum = Math.floor((Math.random() * resolutions.length-1) + 1);
		resolution = resolutions[resNum];

		brand = brands[brandNum];
		imagePath = '/img/' + brand.toLowerCase() + '-television.jpg'
		name = brand;
		name = name.toUpperCase();
		price = Math.floor((Math.random() * 100000 - 1) + 1);
		cost = Math.floor((Math.random() * price) + (price / 2));
		////console.log("Price: " + price);
		////console.log("Cost: " + cost);
		pgroup = Math.floor((Math.random() * product_groups.length - 1) + 1);
	    product_group = product_groups[pgroup];
		product = new Product({
			code: 'tel' + code,
			name: name,
            inventory: {
                onHand: 10,
                disableAtZero: Math.round(Math.random()) ? true : false,
            },
			title: faker.commerce.productAdjective() + ' ' + color + ' ' + name + ' ' + 'Television',
			description: faker.lorem.sentence(),
			taxable: 'Yes',
			shippable: 'Yes',
            price: price,
			brand: brand,
            cost: cost,
			sale_attributes: {
                featured: Math.round(Math.random()) ? true : false,
                new: Math.round(Math.random()) ? true : false,
                trending: Math.round(Math.random()) ? true : false,
                sale: Math.round(Math.random()) ? true : false
            },
			usersBought: items,
			'Product_Group': product_group,
			category: 'Television',
			Attributes: [{
				Name: 'color',
				Value: color
			},{
				Name: 'brand',
				Value: brand
			},{
				Name: "ScreenSize",
				Value: Math.floor((Math.random() * 75-1) + 1)
			},{
				Name: 'Resolution',
				Value: resolution
			},{
				Name: 'NumberofPorts',
				Value: Math.floor((Math.random() * 5-1) + 1)
			},{
				Name: 'Price',
				Value: 	price
			}],
			imagePath: imagePath
		});
		product.save(function(err,productId) {
			if (err) {
				////console.log('error: ',err.message);
			}
			for(user in usersArray) {
				items.push(usersArray[user]._id);
				User.update({_id: usersArray[user]._id},{$push: {"purchased": productId._id }})
			};
			done++;
			if (done==100) {
				exit();
			}
		});
	});
});

function exit() {
	mongoose.disconnect() 
}
                </code></pre>
            </div>
        <!-- /.modal-content -->
        </div>
    <!-- /.modal-dialog -->
    </div>
</div>
        </div>
        <div class="col-xs-4">
            <h2>Fake Sales</h2>
            <p>Creating sales data would be far too arduous by hand so I've written a routine which populates the right collections with sales data automatically.
            <p>
<p data-placement="top" data-toggle="tooltip" title="View Document ">
    <button class="ui right floated btn btn-warning btn-lg" data-title="view" data-toggle="modal" data-target="#view-fake-sales"> <span class="glyphicon glyphicon-eye-open"></span> View Fake Sales Generator
    </button>
</p>
<!-- Add Dialog -->
<div class="modal fade" id="view-fake-sales" tabindex="-1" role="dialog" aria-labelledby="view" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></button>
                <h4 class="modal-title custom_align" id="Heading">View Script</h4>
            </div>
            <div class="modal-body">
                <pre><code class="prettyPrint">
// Michael Lynn <michael.lynn@mongodb.com
// Generate fake sales 
var Product = require('../models/product');
var Order = require('../models/order');
var User = require('../models/user');
var Cart = require('../models/cart');
var mongoose = require('mongoose');
var faker = require('faker');
var Config = require('../config/config');
const dotenv = require('dotenv');
const chalk = require('chalk');
dotenv.load({
	path: '.env.hackathon'
});

mongoose.Promise = global.Promise;
mongoose.connect(process.env.MONGODB_URI || process.env.MONGOLAB_URI);
mongoose.connection.on('error', () => {
	////console.log('%s MongoDB connection error. Please make sure MongoDB is running.', chalk.red('âœ—'));
	logger.log('error', '%s MongoDB connection error. Please make sure MongoDB is running.');
	process.exit();
});

var monthname = months[month];
var setupdate = {
	$set: {}
};
var incupdate = {
	$inc: {}
};
incupdate.$inc['months.' + months[month] + '.sales'] = doc.cart.grandTotal;
incupdate.$inc['ytd'] = doc.cart.grandTotal;
////console.log("inc: " + JSON.stringify(incupdate));
db.collection('orders', function (err, orders_collection) {
	if (err) {
		////console.log('error ' + error.message);
	}
	orders_collection.aggregate([{
			$group: {
				_id: {
					year: {
						$year: "$created"
					},
					momth: {
						$month: "$created"
					}
				}
			},
			$project: {
				year: {
					$year: "$created"
				},
				month: {
					$month: "$created"
				},
				week: {
					$week: "$created"
				},
				ytd: {
					$sum: "$ytd"
				},
			}
		},
		incupdate,
		{
			upsert: true
		},
		function (err, result) {
			if (err) {
				////console.log("Error " + err.message);
			}
			////console.log("RESULT: " + JSON.stringify(result));
		}
	]);
})

</code></pre>
            </div>
        <!-- /.modal-content -->
        </div>
    <!-- /.modal-dialog -->
    </div>
</div>

        </div>
        <div class="col-xs-4">
            <h2>Fake Users</h2>
            <p>Users are at the heart of any eCommerce Solution.
            <p>

<p data-placement="top" data-toggle="tooltip" title="View Document ">
    <button class="ui right floated btn btn-warning btn-lg" data-title="view" data-toggle="modal" data-target="#view-fake-users"> <span class="glyphicon glyphicon-eye-open"></span> View Fake Users Generator
    </button>
</p>
<!-- Add Dialog -->
<div class="modal fade" id="view-fake-users" tabindex="-1" role="dialog" aria-labelledby="view" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></button>
                <h4 class="modal-title custom_align" id="Heading">View Script</h4>
            </div>
            <div class="modal-body">
                <pre><code class="prettyPrint">
// Michael Lynn <michael.lynn@mongodb.com
// Generate fake products 
var User = require('../models/user');
var Product = require('../models/product');
var mongoose = require('mongoose');
var faker = require('faker');
var Config = require('../config/config');
var geocoder = require('geocoder');
const dotenv = require('dotenv');
const chalk = require('chalk');
dotenv.load({
    path: '.env.hackathon'
});

"use strict";

mongoose.Promise = global.Promise;
mongoose.connect(process.env.MONGODB_URI || process.env.MONGOLAB_URI);
mongoose.connection.on('error', () => {
  ////console.log('%s MongoDB connection error. Please make sure MongoDB is running.', chalk.red('âœ—'));
  logger.log('error','%s MongoDB connection error. Please make sure MongoDB is running.');
  process.exit();
});

products = [];
const maxUsers = 20;
var done=0;
admin = new User({
	"email": "admin@admin.com",
	"first_name": "Admin",
	"last_name": "Istrator",
	"role": "admin",
	"password": "password",
	location: {
		type: "Point",
		coordinates: [ 39.941022, -75.156809 ]
	}
});
admin.save(function(err) {
	if (err) {
		////console.log("Error creating administrative user.  " + err.message);
		process.abort();
	}
})
for (var i=0; i < maxUsers; i++) {
	var filter = {};
	var fields = { _id: 1 };
	var options = { skip: 10, limit: 10, count: 5 }
	/* let's get 5 random products to add to the user's purchased array */
	var addr1 = faker.address.streetAddress();
	var city = faker.address.city();
	var state = faker.address.stateAbbr();
	var zipcode = faker.address.zipCode();
	geocoder.geocode(addr1 + ', ' + city + ', ' + state + ' ' + zipcode, function(err, data) {
		////console.log(JSON.stringify(data));
		////console.log('---');
	Product.findRandom(filter, fields, options, function(err,purchasedArray) {
		if (err) {
			////console.log(err);
		}
		var items = []
		for(item in purchasedArray) {
			items.push(purchasedArray[item]._id);
		};
		user = new User({
			location: {
				type: 'Point',
				coordinates: [ faker.address.latitude(), faker.address.longitude() ]
			},
			first_name: faker.name.firstName(),
			last_name: faker.name.lastName(),
			email: faker.internet.email(),
			password: "nopassword",
			addr1: faker.address.streetAddress(),
			city: faker.address.city(),
			state: faker.address.stateAbbr(),
			zipcode: faker.address.zipCode(),
			telephone: faker.phone.phoneNumber(),
			role: 'visitor',
			acceptedTOS: Date.now(),
			created: Date.now(),
			purchased: items
		},function(err,doc) {
			if (err) {
				////console.log('error: ' + err);
			}
		});
		user.save(function(err,newuser) {
			if (err) {
				////console.log('error: ',err.message);
			}
			done++;
			if (done>=maxUsers) {
				exit();
			}
		});
	});
	});
}

function exit() {
	mongoose.disconnect();
	exit;
}


</code></pre>
            </div>
        <!-- /.modal-content -->
        </div>
    <!-- /.modal-dialog -->
    </div>
</div>


        </div>
    </div>


</div>

</div>



<p>
<p>
<p>
<p>